#!/usr/bin/env python3

import sys
import cmath
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

argv = sys.argv

xmin = 1e100
xmax = -1e100
ymin = 1e100
ymax = -1e100

def up(v):
    global xmax
    global xmin
    global ymax
    global ymin
    if v[0] > xmax:
        xmax = v[0]
    if v[0] < xmin:
        xmin = v[0]
    if v[1] > ymax:
        ymax = v[1]
    if v[1] < ymin:
        ymin = v[1]

class Data:
    def __init__(self, t, var, obs, vals):
        self.t = t
        self.var = var
        self.obs = obs
        self.vals = vals
    def __str__(self):
        return "Data({},{},{},{})".format(self.t,self.var,self.obs,self.vals)

def compl(c):
    c = c.split("j")
    if len(c) == 1:
        c = float(c[0])
    else:
        c = complex(float(c[0]),float(c[1]))
    return c
def vals(v,i):
    v = v.split(";")
    if len(v) == 1:
        v = [i,v[0]]
    v[0] = float(v[0])
    v[1] = list(map(compl,v[1].split(":")))
    v[1] = v[1][0] # FIXME handle vectorial data
    return v
def pipe(l):
    l = l.split("|")
    nums = l[3].split()
    l[3] = list(map(vals,nums,range(len(nums))))
    return Data(float(l[0]),l[1],l[2],l[3])

def varAndObs(data):
    return data.var == argv[2] and data.obs == argv[3]

f = list(filter(varAndObs, list(map(pipe,open(argv[1], "r").read().splitlines()))))
n = len(f)
for d in f:
    for v in d.vals:
        up(v)

fig = plt.figure() # initialise la figure
line, = plt.plot([],[], ls='none', marker='+')

plt.xlim(xmin, xmax)
plt.ylim(ymin, ymax)

def init():
    line.set_data([],[])
    return line,

def animate(i):
    v = f[i].vals
    x=np.array([v[0] for v in v])
    y=np.array([v[1] for v in v])
    line.set_data(x, y)
    return line,

ani = animation.FuncAnimation(fig, animate, init_func=init, frames=n, blit=True, interval=16, repeat=True)

#plt.show()
ani.save("{}_{}.gif".format(argv[2],argv[3]))
