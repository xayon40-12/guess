
inline double2 c_exp(double x) {
    double c, s = sincos(x,&c);
    return (double2)(c,s);
}

inline double2 c_times(double2 a,double2 b) {
    return (double2)(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);
}

inline double c_sqrmod(double2 src) {
    return src.x*src.x + src.y*src.y;
}

inline double2 c_times_conj(double2 a,double2 b) {
    return (double2)(a.x*b.x+a.y*b.y, -a.x*b.y+a.y*b.x);
}

inline double ifNaNInf(double x,double val) {
    if(x!=x || isinf(x)) {{ return val; }} else {{ return x; }}
}

inline double fmaxNaNInf(double x,double y) {
    if(x!=x || isinf(x)) {{ return x; }} else {{ if(y!=y || isinf(y)) {{ return y; }} else {{ return fmax(x,y); }} }}
}

inline double periodic1(int x,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return u[w + w_size*((x+x_size)%x_size)];
}

inline double periodic2(int x,int y,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return u[w + w_size*(((x+x_size)%x_size) + x_size*((y+y_size)%y_size))];
}

inline double periodic3(int x,int y,int z,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y_size = get_global_size(1);
    int z_size = get_global_size(2);
    return u[w + w_size*(((x+x_size)%x_size) + x_size*(((y+y_size)%y_size) + y_size*((z+z_size)%z_size)))];
}

inline double periodic(int x,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return periodic1(x,w,w_size,u);
}

inline double ghost1(int x,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return u[w + w_size*(x<0 ? -x : (x>=x_size ? 2*(x_size-1)-x : x))];
}

inline double ghost2(int x,int y,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return u[w + w_size*((x<0 ? -x : (x>=x_size ? 2*(x_size-1)-x : x)) + x_size*(y<0 ? -y : (y>=y_size ? 2*(y_size-1)-y : y)))];
}

inline double ghost3(int x,int y,int z,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y_size = get_global_size(1);
    int z_size = get_global_size(2);
    return u[w + w_size*((x<0 ? -x : (x>=x_size ? 2*(x_size-1)-x : x)) + x_size*((y<0 ? -y : (y>=y_size ? 2*(y_size-1)-y : y)) + y_size*(z<0 ? -z : (z>=z_size ? 2*(z_size-1)-z : z))))];
}

inline double ghost(int x,int w,int w_size,__global double *u) {
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return ghost1(x,w,w_size,u);
}

inline double p(double e) {
    int x = get_global_id(0);
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return e/3.0;
}

inline double pp(double e) {
    int x = get_global_id(0);
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return 1.0/3.0;
}

inline double vk(double ut,double uk) {
    int x = get_global_id(0);
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return fabs(uk/ut);
}

inline double eigk(double e,double ut,double uk) {
    int x = get_global_id(0);
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return (fabs(ut*uk*(1.0-pp(e)*pp(e)))+sqrt((ut*ut-uk*uk-(ut*ut-uk*uk-1)*pp(e)*pp(e))*pp(e)*pp(e)))/(ut*ut-(ut*ut-1)*pp(e)*pp(e));
}

inline double T10(double e,double ut,double ux) {
    int x = get_global_id(0);
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return (e+p(e))*ut*ux;
}

inline double T11(double e,double ut,double ux) {
    int x = get_global_id(0);
    int x_size = get_global_size(0);
    int y = get_global_id(1);
    int y_size = get_global_size(1);
    int z = get_global_id(2);
    int z_size = get_global_size(2);
    return (e+p(e))*ux*ux + p(e);
}

__kernel void accuracy(__global double *dst,__global double *eig_k0,__global double *eig_k1,__global double *T00_k0,__global double *T00_k1,__global double *T01_k0,__global double *T01_k1,__global double *e_k0,__global double *e_k1,__global double *ut_k0,__global double *ut_k1,__global double *ux_k0,__global double *ux_k1) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    double tmp = fmax(fabs(0.25*eig_k0[x]-0.25*eig_k1[x]),fmax(fabs(0.25*T00_k0[x]-0.25*T00_k1[x]),fmax(fabs(0.25*T01_k0[x]-0.25*T01_k1[x]),fmax(fabs(0.25*e_k0[x]-0.25*e_k1[x]),fmax(fabs(0.25*ut_k0[x]-0.25*ut_k1[x]),fabs(0.25*ux_k0[x]-0.25*ux_k1[x]))))));
}

__kernel void algo_FFT(__global double2 *src,__global double2 *dst,uint i,uchar dir,uchar w) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);

    uint Ni = ((uint[3]){x_size,y_size,z_size}[dir])>>i;
    uint u  = ((uint[3]){x,y,z}[dir])/Ni;
    uint uNi = u*Ni;

    uint xx  = (x+(uint[3]){uNi,0,0}[dir])%x_size;
    uint yy  = (y+(uint[3]){0,uNi,0}[dir])%y_size;
    uint zz  = (z+(uint[3]){0,0,uNi}[dir])%z_size;

    uint xp = (xx+(uint[3]){Ni,0,0}[dir])%x_size;
    uint yp = (yy+(uint[3]){0,Ni,0}[dir])%y_size;
    uint zp = (zz+(uint[3]){0,0,Ni}[dir])%z_size;

    uint id = w*(x+x_size*(y+y_size*z));
    uint ida = w*(xx+x_size*(yy+y_size*zz));
    uint idb = w*(xp+x_size*(yp+y_size*zp));
    for(int _iw_ = 0; _iw_<w; _iw_++) {
        dst[id] = src[ida] + c_times(src[idb],c_exp(-2*M_PI*u/(1<<i)));
        id++; ida++; idb++;
    }
}

__kernel void algo_correlation(__global double *src,__global double *dst,uchar4 dir,uchar w) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);

    y *= x_size;
    z *= x_size*y_size;
    uint xp = (uint[2]){x,x_size/2}[dir.x];
    uint yp = (uint[2]){y,x_size*(y_size/2)}[dir.y];
    uint zp = (uint[2]){z,x_size*y_size*(z_size/2)}[dir.z];
    uint id = w*(x+y+z);
    uint idp = w*(xp+yp+zp);
    for(int _iw_ = 0; _iw_<w; _iw_++) {
        dst[id] = src[id]*src[idp];
        id++; idp++;
    }
}

__kernel void algo_max(__global double *src,__global double *dst,uint s,uint4 size,uchar dir,uchar w) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);

    x *= (uint[3]){s,1,1}[dir];
    y *= size.x*(uint[3]){1,s,1}[dir];
    z *= size.x*size.y*(uint[3]){1,1,s}[dir];
    uint xp = x+(uint[3]){s/2,0,0}[dir];
    uint yp = y+(uint[3]){0,size.x*s/2,0}[dir];
    uint zp = z+(uint[3]){0,0,size.x*size.y*s/2}[dir];
    uint id = w*(x+y+z);
    uint idp = w*(xp+yp+zp);
    for(int _iw_ = 0; _iw_<w; _iw_++) {
        dst[id] = (src[id]>src[idp])?src[id]:src[idp];
        id++; idp++;
    }
}

__kernel void algo_sum(__global double *src,__global double *dst,uint s,uint4 size,uchar dir,uchar w) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);

    x *= (uint[3]){s,1,1}[dir];
    y *= size.x*(uint[3]){1,s,1}[dir];
    z *= size.x*size.y*(uint[3]){1,1,s}[dir];
    uint xp = x+(uint[3]){s/2,0,0}[dir];
    uint yp = y+(uint[3]){0,size.x*s/2,0}[dir];
    uint zp = z+(uint[3]){0,0,size.x*size.y*s/2}[dir];
    uint id = w*(x+y+z);
    uint idp = w*(xp+yp+zp);
    for(int _iw_ = 0; _iw_<w; _iw_++) {
        dst[id] = src[id]+src[idp];
        id++; idp++;
    }
}

__kernel void cdivides(__global double *src,double c,__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = src[x]/c;
}

__kernel void cminus(__global double *src,double c,__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = src[x]-c;
}

__kernel void complex_from_real(__global double *src,__global double2 *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = (double2)(src[x],0);
}

__kernel void constraint_e(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double e0p0 = ghost(x,0,1,e);
    dst[_i] = fmax(e0p0,1e-10);
    }
}

__kernel void constraint_ut(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double ut0p0 = ghost(x,0,1,ut);
    dst[_i] = fmax(ut0p0,1e0);
    }
}

__kernel void ctimes(__global double *src,double c,__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = src[x]*c;
}

__kernel void dmove(__global double *src,__global double *dst,uint4 size,uint4 dst_size,uint vect_dim) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    for(uint _w = 0; _w<vect_dim; _w++) dst[vect_dim*(dst_size.x*(x+dst_size.y*(y+dst_size.z*z)) + dst_size.w)+_w] = src[vect_dim*x+size.x*(y+size.y*z)+_w];
}

__kernel void implicit_error(__global double *dst,__global double *eig_k0,__global double *eig_k1,__global double *eig_fk0,__global double *eig_fk1,__global double *T00_k0,__global double *T00_k1,__global double *T00_fk0,__global double *T00_fk1,__global double *T01_k0,__global double *T01_k1,__global double *T01_fk0,__global double *T01_fk1,__global double *e_k0,__global double *e_k1,__global double *e_fk0,__global double *e_fk1,__global double *ut_k0,__global double *ut_k1,__global double *ut_fk0,__global double *ut_fk1,__global double *ux_k0,__global double *ux_k1,__global double *ux_fk0,__global double *ux_fk1,__global double *err,double e) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    double tmp = fmaxNaNInf(fabs(eig_fk0[x]-eig_k0[x])*ifNaNInf(1/fmax(fabs(eig_fk0[x]),fabs(eig_k0[x])), 1),fmaxNaNInf(fabs(eig_fk1[x]-eig_k1[x])*ifNaNInf(1/fmax(fabs(eig_fk1[x]),fabs(eig_k1[x])), 1),fmaxNaNInf(fabs(T00_fk0[x]-T00_k0[x])*ifNaNInf(1/fmax(fabs(T00_fk0[x]),fabs(T00_k0[x])), 1),fmaxNaNInf(fabs(T00_fk1[x]-T00_k1[x])*ifNaNInf(1/fmax(fabs(T00_fk1[x]),fabs(T00_k1[x])), 1),fmaxNaNInf(fabs(T01_fk0[x]-T01_k0[x])*ifNaNInf(1/fmax(fabs(T01_fk0[x]),fabs(T01_k0[x])), 1),fmaxNaNInf(fabs(T01_fk1[x]-T01_k1[x])*ifNaNInf(1/fmax(fabs(T01_fk1[x]),fabs(T01_k1[x])), 1),fmaxNaNInf(fabs(e_fk0[x]-e_k0[x])*ifNaNInf(1/fmax(fabs(e_fk0[x]),fabs(e_k0[x])), 1),fmaxNaNInf(fabs(e_fk1[x]-e_k1[x])*ifNaNInf(1/fmax(fabs(e_fk1[x]),fabs(e_k1[x])), 1),fmaxNaNInf(fabs(ut_fk0[x]-ut_k0[x])*ifNaNInf(1/fmax(fabs(ut_fk0[x]),fabs(ut_k0[x])), 1),fmaxNaNInf(fabs(ut_fk1[x]-ut_k1[x])*ifNaNInf(1/fmax(fabs(ut_fk1[x]),fabs(ut_k1[x])), 1),fmaxNaNInf(fabs(ux_fk0[x]-ux_k0[x])*ifNaNInf(1/fmax(fabs(ux_fk0[x]),fabs(ux_k0[x])), 1),fabs(ux_fk1[x]-ux_k1[x])*ifNaNInf(1/fmax(fabs(ux_fk1[x]),fabs(ux_k1[x])), 1))))))))))));
    dst[x] = tmp;
    err[x] = tmp>e;
}

__kernel void init_T00(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
double e0p0 = ghost(x,0,1,e);
    dst[_i] = e0p0;

}

__kernel void init_T01(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);

    dst[_i] = 0e0;

}

__kernel void init_e(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);

    dst[_i] = x<x_size/2?10:1;

}

__kernel void init_ut(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);

    dst[_i] = 1e0;

}

__kernel void init_ux(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);

    dst[_i] = 0e0;

}

__kernel void integrator_0_T00(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double eig0p0 = ghost(x,0,1,eig);
    double ut0m1 = ghost(x-1,0,1,ut);
    double e0p0 = ghost(x,0,1,e);
    double e0p1 = ghost(x+1,0,1,e);
    double ux0p1 = ghost(x+1,0,1,ux);
    double ux0m1 = ghost(x-1,0,1,ux);
    double e0m1 = ghost(x-1,0,1,e);
    double T000m2 = ghost(x-2,0,1,T00);
    double ux0p2 = ghost(x+2,0,1,ux);
    double ut0p0 = ghost(x,0,1,ut);
    double T000m1 = ghost(x-1,0,1,T00);
    double T000p0 = ghost(x,0,1,T00);
    double eig0m2 = ghost(x-2,0,1,eig);
    double ux0m2 = ghost(x-2,0,1,ux);
    double eig0p1 = ghost(x+1,0,1,eig);
    double eig0m1 = ghost(x-1,0,1,eig);
    double ux0p0 = ghost(x,0,1,ux);
    double T000p2 = ghost(x+2,0,1,T00);
    double eig0p2 = ghost(x+2,0,1,eig);
    double ut0m2 = ghost(x-2,0,1,ut);
    double ut0p2 = ghost(x+2,0,1,ut);
    double e0m2 = ghost(x-2,0,1,e);
    double ut0p1 = ghost(x+1,0,1,ut);
    double e0p2 = ghost(x+2,0,1,e);
    double T000p1 = ghost(x+1,0,1,T00);
    dst[0+_i] = -1e0 * (5e-1 * ((T10((e0p1 - (2.5e-1 * (sign(1.1e0 * (e0p1 - (e0p0))) + sign(5e-1 * (sign(5e-1 * (e0p2 - (e0p0))) + sign(1.1e0 * (e0p2 - (e0p1)))) * min(fabs(5e-1 * (e0p2 - (e0p0))),fabs(1.1e0 * (e0p2 - (e0p1)))))) * min(fabs(1.1e0 * (e0p1 - (e0p0))),fabs(5e-1 * (sign(5e-1 * (e0p2 - (e0p0))) + sign(1.1e0 * (e0p2 - (e0p1)))) * min(fabs(5e-1 * (e0p2 - (e0p0))),fabs(1.1e0 * (e0p2 - (e0p1)))))))),(ut0p1 - (2.5e-1 * (sign(1.1e0 * (ut0p1 - (ut0p0))) + sign(5e-1 * (sign(5e-1 * (ut0p2 - (ut0p0))) + sign(1.1e0 * (ut0p2 - (ut0p1)))) * min(fabs(5e-1 * (ut0p2 - (ut0p0))),fabs(1.1e0 * (ut0p2 - (ut0p1)))))) * min(fabs(1.1e0 * (ut0p1 - (ut0p0))),fabs(5e-1 * (sign(5e-1 * (ut0p2 - (ut0p0))) + sign(1.1e0 * (ut0p2 - (ut0p1)))) * min(fabs(5e-1 * (ut0p2 - (ut0p0))),fabs(1.1e0 * (ut0p2 - (ut0p1)))))))),(ux0p1 - (2.5e-1 * (sign(1.1e0 * (ux0p1 - (ux0p0))) + sign(5e-1 * (sign(5e-1 * (ux0p2 - (ux0p0))) + sign(1.1e0 * (ux0p2 - (ux0p1)))) * min(fabs(5e-1 * (ux0p2 - (ux0p0))),fabs(1.1e0 * (ux0p2 - (ux0p1)))))) * min(fabs(1.1e0 * (ux0p1 - (ux0p0))),fabs(5e-1 * (sign(5e-1 * (ux0p2 - (ux0p0))) + sign(1.1e0 * (ux0p2 - (ux0p1)))) * min(fabs(5e-1 * (ux0p2 - (ux0p0))),fabs(1.1e0 * (ux0p2 - (ux0p1))))))))) + T10((e0p0 + 2.5e-1 * (sign(1.1e0 * (e0p0 - (e0m1))) + sign(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0)))))) * min(fabs(1.1e0 * (e0p0 - (e0m1))),fabs(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0))))))),(ut0p0 + 2.5e-1 * (sign(1.1e0 * (ut0p0 - (ut0m1))) + sign(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0)))))) * min(fabs(1.1e0 * (ut0p0 - (ut0m1))),fabs(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0))))))),(ux0p0 + 2.5e-1 * (sign(1.1e0 * (ux0p0 - (ux0m1))) + sign(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0)))))) * min(fabs(1.1e0 * (ux0p0 - (ux0m1))),fabs(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0))))))))) - (max(fabs((eig0p1 - (2.5e-1 * (sign(1.1e0 * (eig0p1 - (eig0p0))) + sign(5e-1 * (sign(5e-1 * (eig0p2 - (eig0p0))) + sign(1.1e0 * (eig0p2 - (eig0p1)))) * min(fabs(5e-1 * (eig0p2 - (eig0p0))),fabs(1.1e0 * (eig0p2 - (eig0p1)))))) * min(fabs(1.1e0 * (eig0p1 - (eig0p0))),fabs(5e-1 * (sign(5e-1 * (eig0p2 - (eig0p0))) + sign(1.1e0 * (eig0p2 - (eig0p1)))) * min(fabs(5e-1 * (eig0p2 - (eig0p0))),fabs(1.1e0 * (eig0p2 - (eig0p1))))))))),fabs((eig0p0 + 2.5e-1 * (sign(1.1e0 * (eig0p0 - (eig0m1))) + sign(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0)))))) * min(fabs(1.1e0 * (eig0p0 - (eig0m1))),fabs(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0))))))))) * (T000p1 - ((2.5e-1 * (sign(1.1e0 * (T000p1 - (T000p0))) + sign(5e-1 * (sign(5e-1 * (T000p2 - (T000p0))) + sign(1.1e0 * (T000p2 - (T000p1)))) * min(fabs(5e-1 * (T000p2 - (T000p0))),fabs(1.1e0 * (T000p2 - (T000p1)))))) * min(fabs(1.1e0 * (T000p1 - (T000p0))),fabs(5e-1 * (sign(5e-1 * (T000p2 - (T000p0))) + sign(1.1e0 * (T000p2 - (T000p1)))) * min(fabs(5e-1 * (T000p2 - (T000p0))),fabs(1.1e0 * (T000p2 - (T000p1)))))) + T000p0 + 2.5e-1 * (sign(1.1e0 * (T000p0 - (T000m1))) + sign(5e-1 * (sign(5e-1 * (T000p1 - (T000m1))) + sign(1.1e0 * (T000p1 - (T000p0)))) * min(fabs(5e-1 * (T000p1 - (T000m1))),fabs(1.1e0 * (T000p1 - (T000p0)))))) * min(fabs(1.1e0 * (T000p0 - (T000m1))),fabs(5e-1 * (sign(5e-1 * (T000p1 - (T000m1))) + sign(1.1e0 * (T000p1 - (T000p0)))) * min(fabs(5e-1 * (T000p1 - (T000m1))),fabs(1.1e0 * (T000p1 - (T000p0))))))))))) - (5e-1 * ((T10((e0p0 - (2.5e-1 * (sign(1.1e0 * (e0p0 - (e0m1))) + sign(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0)))))) * min(fabs(1.1e0 * (e0p0 - (e0m1))),fabs(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0)))))))),(ut0p0 - (2.5e-1 * (sign(1.1e0 * (ut0p0 - (ut0m1))) + sign(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0)))))) * min(fabs(1.1e0 * (ut0p0 - (ut0m1))),fabs(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0)))))))),(ux0p0 - (2.5e-1 * (sign(1.1e0 * (ux0p0 - (ux0m1))) + sign(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0)))))) * min(fabs(1.1e0 * (ux0p0 - (ux0m1))),fabs(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0))))))))) + T10((e0m1 + 2.5e-1 * (sign(1.1e0 * (e0m1 - (e0m2))) + sign(5e-1 * (sign(5e-1 * (e0p0 - (e0m2))) + sign(1.1e0 * (e0p0 - (e0m1)))) * min(fabs(5e-1 * (e0p0 - (e0m2))),fabs(1.1e0 * (e0p0 - (e0m1)))))) * min(fabs(1.1e0 * (e0m1 - (e0m2))),fabs(5e-1 * (sign(5e-1 * (e0p0 - (e0m2))) + sign(1.1e0 * (e0p0 - (e0m1)))) * min(fabs(5e-1 * (e0p0 - (e0m2))),fabs(1.1e0 * (e0p0 - (e0m1))))))),(ut0m1 + 2.5e-1 * (sign(1.1e0 * (ut0m1 - (ut0m2))) + sign(5e-1 * (sign(5e-1 * (ut0p0 - (ut0m2))) + sign(1.1e0 * (ut0p0 - (ut0m1)))) * min(fabs(5e-1 * (ut0p0 - (ut0m2))),fabs(1.1e0 * (ut0p0 - (ut0m1)))))) * min(fabs(1.1e0 * (ut0m1 - (ut0m2))),fabs(5e-1 * (sign(5e-1 * (ut0p0 - (ut0m2))) + sign(1.1e0 * (ut0p0 - (ut0m1)))) * min(fabs(5e-1 * (ut0p0 - (ut0m2))),fabs(1.1e0 * (ut0p0 - (ut0m1))))))),(ux0m1 + 2.5e-1 * (sign(1.1e0 * (ux0m1 - (ux0m2))) + sign(5e-1 * (sign(5e-1 * (ux0p0 - (ux0m2))) + sign(1.1e0 * (ux0p0 - (ux0m1)))) * min(fabs(5e-1 * (ux0p0 - (ux0m2))),fabs(1.1e0 * (ux0p0 - (ux0m1)))))) * min(fabs(1.1e0 * (ux0m1 - (ux0m2))),fabs(5e-1 * (sign(5e-1 * (ux0p0 - (ux0m2))) + sign(1.1e0 * (ux0p0 - (ux0m1)))) * min(fabs(5e-1 * (ux0p0 - (ux0m2))),fabs(1.1e0 * (ux0p0 - (ux0m1))))))))) - (max(fabs((eig0p0 - (2.5e-1 * (sign(1.1e0 * (eig0p0 - (eig0m1))) + sign(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0)))))) * min(fabs(1.1e0 * (eig0p0 - (eig0m1))),fabs(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0))))))))),fabs((eig0m1 + 2.5e-1 * (sign(1.1e0 * (eig0m1 - (eig0m2))) + sign(5e-1 * (sign(5e-1 * (eig0p0 - (eig0m2))) + sign(1.1e0 * (eig0p0 - (eig0m1)))) * min(fabs(5e-1 * (eig0p0 - (eig0m2))),fabs(1.1e0 * (eig0p0 - (eig0m1)))))) * min(fabs(1.1e0 * (eig0m1 - (eig0m2))),fabs(5e-1 * (sign(5e-1 * (eig0p0 - (eig0m2))) + sign(1.1e0 * (eig0p0 - (eig0m1)))) * min(fabs(5e-1 * (eig0p0 - (eig0m2))),fabs(1.1e0 * (eig0p0 - (eig0m1))))))))) * (T000p0 - ((2.5e-1 * (sign(1.1e0 * (T000p0 - (T000m1))) + sign(5e-1 * (sign(5e-1 * (T000p1 - (T000m1))) + sign(1.1e0 * (T000p1 - (T000p0)))) * min(fabs(5e-1 * (T000p1 - (T000m1))),fabs(1.1e0 * (T000p1 - (T000p0)))))) * min(fabs(1.1e0 * (T000p0 - (T000m1))),fabs(5e-1 * (sign(5e-1 * (T000p1 - (T000m1))) + sign(1.1e0 * (T000p1 - (T000p0)))) * min(fabs(5e-1 * (T000p1 - (T000m1))),fabs(1.1e0 * (T000p1 - (T000p0)))))) + T000m1 + 2.5e-1 * (sign(1.1e0 * (T000m1 - (T000m2))) + sign(5e-1 * (sign(5e-1 * (T000p0 - (T000m2))) + sign(1.1e0 * (T000p0 - (T000m1)))) * min(fabs(5e-1 * (T000p0 - (T000m2))),fabs(1.1e0 * (T000p0 - (T000m1)))))) * min(fabs(1.1e0 * (T000m1 - (T000m2))),fabs(5e-1 * (sign(5e-1 * (T000p0 - (T000m2))) + sign(1.1e0 * (T000p0 - (T000m1)))) * min(fabs(5e-1 * (T000p0 - (T000m2))),fabs(1.1e0 * (T000p0 - (T000m1))))))))))))) * 1.28e1;
    }
}

__kernel void integrator_0_T01(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double e0p1 = ghost(x+1,0,1,e);
    double ut0m1 = ghost(x-1,0,1,ut);
    double e0m2 = ghost(x-2,0,1,e);
    double ut0p2 = ghost(x+2,0,1,ut);
    double ux0m2 = ghost(x-2,0,1,ux);
    double ux0m1 = ghost(x-1,0,1,ux);
    double T010p0 = ghost(x,0,1,T01);
    double e0m1 = ghost(x-1,0,1,e);
    double ux0p1 = ghost(x+1,0,1,ux);
    double ux0p2 = ghost(x+2,0,1,ux);
    double e0p0 = ghost(x,0,1,e);
    double ut0p0 = ghost(x,0,1,ut);
    double eig0m1 = ghost(x-1,0,1,eig);
    double T010p1 = ghost(x+1,0,1,T01);
    double e0p2 = ghost(x+2,0,1,e);
    double ux0p0 = ghost(x,0,1,ux);
    double T010m1 = ghost(x-1,0,1,T01);
    double eig0p2 = ghost(x+2,0,1,eig);
    double T010p2 = ghost(x+2,0,1,T01);
    double eig0p0 = ghost(x,0,1,eig);
    double eig0m2 = ghost(x-2,0,1,eig);
    double ut0p1 = ghost(x+1,0,1,ut);
    double T010m2 = ghost(x-2,0,1,T01);
    double eig0p1 = ghost(x+1,0,1,eig);
    double ut0m2 = ghost(x-2,0,1,ut);
    dst[0+_i] = -1e0 * (5e-1 * ((T11((e0p1 - (2.5e-1 * (sign(1.1e0 * (e0p1 - (e0p0))) + sign(5e-1 * (sign(5e-1 * (e0p2 - (e0p0))) + sign(1.1e0 * (e0p2 - (e0p1)))) * min(fabs(5e-1 * (e0p2 - (e0p0))),fabs(1.1e0 * (e0p2 - (e0p1)))))) * min(fabs(1.1e0 * (e0p1 - (e0p0))),fabs(5e-1 * (sign(5e-1 * (e0p2 - (e0p0))) + sign(1.1e0 * (e0p2 - (e0p1)))) * min(fabs(5e-1 * (e0p2 - (e0p0))),fabs(1.1e0 * (e0p2 - (e0p1)))))))),(ut0p1 - (2.5e-1 * (sign(1.1e0 * (ut0p1 - (ut0p0))) + sign(5e-1 * (sign(5e-1 * (ut0p2 - (ut0p0))) + sign(1.1e0 * (ut0p2 - (ut0p1)))) * min(fabs(5e-1 * (ut0p2 - (ut0p0))),fabs(1.1e0 * (ut0p2 - (ut0p1)))))) * min(fabs(1.1e0 * (ut0p1 - (ut0p0))),fabs(5e-1 * (sign(5e-1 * (ut0p2 - (ut0p0))) + sign(1.1e0 * (ut0p2 - (ut0p1)))) * min(fabs(5e-1 * (ut0p2 - (ut0p0))),fabs(1.1e0 * (ut0p2 - (ut0p1)))))))),(ux0p1 - (2.5e-1 * (sign(1.1e0 * (ux0p1 - (ux0p0))) + sign(5e-1 * (sign(5e-1 * (ux0p2 - (ux0p0))) + sign(1.1e0 * (ux0p2 - (ux0p1)))) * min(fabs(5e-1 * (ux0p2 - (ux0p0))),fabs(1.1e0 * (ux0p2 - (ux0p1)))))) * min(fabs(1.1e0 * (ux0p1 - (ux0p0))),fabs(5e-1 * (sign(5e-1 * (ux0p2 - (ux0p0))) + sign(1.1e0 * (ux0p2 - (ux0p1)))) * min(fabs(5e-1 * (ux0p2 - (ux0p0))),fabs(1.1e0 * (ux0p2 - (ux0p1))))))))) + T11((e0p0 + 2.5e-1 * (sign(1.1e0 * (e0p0 - (e0m1))) + sign(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0)))))) * min(fabs(1.1e0 * (e0p0 - (e0m1))),fabs(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0))))))),(ut0p0 + 2.5e-1 * (sign(1.1e0 * (ut0p0 - (ut0m1))) + sign(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0)))))) * min(fabs(1.1e0 * (ut0p0 - (ut0m1))),fabs(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0))))))),(ux0p0 + 2.5e-1 * (sign(1.1e0 * (ux0p0 - (ux0m1))) + sign(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0)))))) * min(fabs(1.1e0 * (ux0p0 - (ux0m1))),fabs(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0))))))))) - (max(fabs((eig0p1 - (2.5e-1 * (sign(1.1e0 * (eig0p1 - (eig0p0))) + sign(5e-1 * (sign(5e-1 * (eig0p2 - (eig0p0))) + sign(1.1e0 * (eig0p2 - (eig0p1)))) * min(fabs(5e-1 * (eig0p2 - (eig0p0))),fabs(1.1e0 * (eig0p2 - (eig0p1)))))) * min(fabs(1.1e0 * (eig0p1 - (eig0p0))),fabs(5e-1 * (sign(5e-1 * (eig0p2 - (eig0p0))) + sign(1.1e0 * (eig0p2 - (eig0p1)))) * min(fabs(5e-1 * (eig0p2 - (eig0p0))),fabs(1.1e0 * (eig0p2 - (eig0p1))))))))),fabs((eig0p0 + 2.5e-1 * (sign(1.1e0 * (eig0p0 - (eig0m1))) + sign(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0)))))) * min(fabs(1.1e0 * (eig0p0 - (eig0m1))),fabs(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0))))))))) * (T010p1 - ((2.5e-1 * (sign(1.1e0 * (T010p1 - (T010p0))) + sign(5e-1 * (sign(5e-1 * (T010p2 - (T010p0))) + sign(1.1e0 * (T010p2 - (T010p1)))) * min(fabs(5e-1 * (T010p2 - (T010p0))),fabs(1.1e0 * (T010p2 - (T010p1)))))) * min(fabs(1.1e0 * (T010p1 - (T010p0))),fabs(5e-1 * (sign(5e-1 * (T010p2 - (T010p0))) + sign(1.1e0 * (T010p2 - (T010p1)))) * min(fabs(5e-1 * (T010p2 - (T010p0))),fabs(1.1e0 * (T010p2 - (T010p1)))))) + T010p0 + 2.5e-1 * (sign(1.1e0 * (T010p0 - (T010m1))) + sign(5e-1 * (sign(5e-1 * (T010p1 - (T010m1))) + sign(1.1e0 * (T010p1 - (T010p0)))) * min(fabs(5e-1 * (T010p1 - (T010m1))),fabs(1.1e0 * (T010p1 - (T010p0)))))) * min(fabs(1.1e0 * (T010p0 - (T010m1))),fabs(5e-1 * (sign(5e-1 * (T010p1 - (T010m1))) + sign(1.1e0 * (T010p1 - (T010p0)))) * min(fabs(5e-1 * (T010p1 - (T010m1))),fabs(1.1e0 * (T010p1 - (T010p0))))))))))) - (5e-1 * ((T11((e0p0 - (2.5e-1 * (sign(1.1e0 * (e0p0 - (e0m1))) + sign(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0)))))) * min(fabs(1.1e0 * (e0p0 - (e0m1))),fabs(5e-1 * (sign(5e-1 * (e0p1 - (e0m1))) + sign(1.1e0 * (e0p1 - (e0p0)))) * min(fabs(5e-1 * (e0p1 - (e0m1))),fabs(1.1e0 * (e0p1 - (e0p0)))))))),(ut0p0 - (2.5e-1 * (sign(1.1e0 * (ut0p0 - (ut0m1))) + sign(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0)))))) * min(fabs(1.1e0 * (ut0p0 - (ut0m1))),fabs(5e-1 * (sign(5e-1 * (ut0p1 - (ut0m1))) + sign(1.1e0 * (ut0p1 - (ut0p0)))) * min(fabs(5e-1 * (ut0p1 - (ut0m1))),fabs(1.1e0 * (ut0p1 - (ut0p0)))))))),(ux0p0 - (2.5e-1 * (sign(1.1e0 * (ux0p0 - (ux0m1))) + sign(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0)))))) * min(fabs(1.1e0 * (ux0p0 - (ux0m1))),fabs(5e-1 * (sign(5e-1 * (ux0p1 - (ux0m1))) + sign(1.1e0 * (ux0p1 - (ux0p0)))) * min(fabs(5e-1 * (ux0p1 - (ux0m1))),fabs(1.1e0 * (ux0p1 - (ux0p0))))))))) + T11((e0m1 + 2.5e-1 * (sign(1.1e0 * (e0m1 - (e0m2))) + sign(5e-1 * (sign(5e-1 * (e0p0 - (e0m2))) + sign(1.1e0 * (e0p0 - (e0m1)))) * min(fabs(5e-1 * (e0p0 - (e0m2))),fabs(1.1e0 * (e0p0 - (e0m1)))))) * min(fabs(1.1e0 * (e0m1 - (e0m2))),fabs(5e-1 * (sign(5e-1 * (e0p0 - (e0m2))) + sign(1.1e0 * (e0p0 - (e0m1)))) * min(fabs(5e-1 * (e0p0 - (e0m2))),fabs(1.1e0 * (e0p0 - (e0m1))))))),(ut0m1 + 2.5e-1 * (sign(1.1e0 * (ut0m1 - (ut0m2))) + sign(5e-1 * (sign(5e-1 * (ut0p0 - (ut0m2))) + sign(1.1e0 * (ut0p0 - (ut0m1)))) * min(fabs(5e-1 * (ut0p0 - (ut0m2))),fabs(1.1e0 * (ut0p0 - (ut0m1)))))) * min(fabs(1.1e0 * (ut0m1 - (ut0m2))),fabs(5e-1 * (sign(5e-1 * (ut0p0 - (ut0m2))) + sign(1.1e0 * (ut0p0 - (ut0m1)))) * min(fabs(5e-1 * (ut0p0 - (ut0m2))),fabs(1.1e0 * (ut0p0 - (ut0m1))))))),(ux0m1 + 2.5e-1 * (sign(1.1e0 * (ux0m1 - (ux0m2))) + sign(5e-1 * (sign(5e-1 * (ux0p0 - (ux0m2))) + sign(1.1e0 * (ux0p0 - (ux0m1)))) * min(fabs(5e-1 * (ux0p0 - (ux0m2))),fabs(1.1e0 * (ux0p0 - (ux0m1)))))) * min(fabs(1.1e0 * (ux0m1 - (ux0m2))),fabs(5e-1 * (sign(5e-1 * (ux0p0 - (ux0m2))) + sign(1.1e0 * (ux0p0 - (ux0m1)))) * min(fabs(5e-1 * (ux0p0 - (ux0m2))),fabs(1.1e0 * (ux0p0 - (ux0m1))))))))) - (max(fabs((eig0p0 - (2.5e-1 * (sign(1.1e0 * (eig0p0 - (eig0m1))) + sign(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0)))))) * min(fabs(1.1e0 * (eig0p0 - (eig0m1))),fabs(5e-1 * (sign(5e-1 * (eig0p1 - (eig0m1))) + sign(1.1e0 * (eig0p1 - (eig0p0)))) * min(fabs(5e-1 * (eig0p1 - (eig0m1))),fabs(1.1e0 * (eig0p1 - (eig0p0))))))))),fabs((eig0m1 + 2.5e-1 * (sign(1.1e0 * (eig0m1 - (eig0m2))) + sign(5e-1 * (sign(5e-1 * (eig0p0 - (eig0m2))) + sign(1.1e0 * (eig0p0 - (eig0m1)))) * min(fabs(5e-1 * (eig0p0 - (eig0m2))),fabs(1.1e0 * (eig0p0 - (eig0m1)))))) * min(fabs(1.1e0 * (eig0m1 - (eig0m2))),fabs(5e-1 * (sign(5e-1 * (eig0p0 - (eig0m2))) + sign(1.1e0 * (eig0p0 - (eig0m1)))) * min(fabs(5e-1 * (eig0p0 - (eig0m2))),fabs(1.1e0 * (eig0p0 - (eig0m1))))))))) * (T010p0 - ((2.5e-1 * (sign(1.1e0 * (T010p0 - (T010m1))) + sign(5e-1 * (sign(5e-1 * (T010p1 - (T010m1))) + sign(1.1e0 * (T010p1 - (T010p0)))) * min(fabs(5e-1 * (T010p1 - (T010m1))),fabs(1.1e0 * (T010p1 - (T010p0)))))) * min(fabs(1.1e0 * (T010p0 - (T010m1))),fabs(5e-1 * (sign(5e-1 * (T010p1 - (T010m1))) + sign(1.1e0 * (T010p1 - (T010p0)))) * min(fabs(5e-1 * (T010p1 - (T010m1))),fabs(1.1e0 * (T010p1 - (T010p0)))))) + T010m1 + 2.5e-1 * (sign(1.1e0 * (T010m1 - (T010m2))) + sign(5e-1 * (sign(5e-1 * (T010p0 - (T010m2))) + sign(1.1e0 * (T010p0 - (T010m1)))) * min(fabs(5e-1 * (T010p0 - (T010m2))),fabs(1.1e0 * (T010p0 - (T010m1)))))) * min(fabs(1.1e0 * (T010m1 - (T010m2))),fabs(5e-1 * (sign(5e-1 * (T010p0 - (T010m2))) + sign(1.1e0 * (T010p0 - (T010m1)))) * min(fabs(5e-1 * (T010p0 - (T010m2))),fabs(1.1e0 * (T010p0 - (T010m1))))))))))))) * 1.28e1;
    }
}

__kernel void integrator_0_e(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double T010p0 = ghost(x,0,1,T01);
    double e0p0 = ghost(x,0,1,e);
    double T000p0 = ghost(x,0,1,T00);
    dst[0+_i] = (T000p0 - (T010p0 * T010p0 / ((T000p0 + p(e0p0)))));
    }
}

__kernel void integrator_0_eig(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double e0p0 = ghost(x,0,1,e);
    double ux0p0 = ghost(x,0,1,ux);
    double ut0p0 = ghost(x,0,1,ut);
    dst[0+_i] = fmax(eigk(e0p0,ut0p0,ux0p0),vk(ut0p0,ux0p0));
    }
}

__kernel void integrator_0_stage0(__global double *dst,__global double *src,double h,__global double *src1,__global double *src2,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint i = x+x_size*(y+y_size*z);
    if(__err[i]){
        dst[i] = src[i] + h*(0.4166666666666667*src1[i] + -0.08333333333333333*src2[i]);
    }
}

__kernel void integrator_0_stage0_eq(__global double *dst,__global double *src,double h,__global double *src1,__global double *src2,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint i = x+x_size*(y+y_size*z);
    if(__err[i]){
        dst[i] = src1[i];
    }
}

__kernel void integrator_0_stage1(__global double *dst,__global double *src,double h,__global double *src1,__global double *src2,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint i = x+x_size*(y+y_size*z);
    if(__err[i]){
        dst[i] = src[i] + h*(0.75*src1[i] + 0.25*src2[i]);
    }
}

__kernel void integrator_0_stage1_eq(__global double *dst,__global double *src,double h,__global double *src1,__global double *src2,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint i = x+x_size*(y+y_size*z);
    if(__err[i]){
        dst[i] = src2[i];
    }
}

__kernel void integrator_0_stage2(__global double *dst,__global double *src,double h,__global double *src1,__global double *src2,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint i = x+x_size*(y+y_size*z);
    if(__err[i]){
        dst[i] = src[i] + h*(0.75*src1[i] + 0.25*src2[i]);
    }
}

__kernel void integrator_0_stage2_eq(__global double *dst,__global double *src,double h,__global double *src1,__global double *src2,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint i = x+x_size*(y+y_size*z);
    if(__err[i]){
        dst[i] = src2[i];
    }
}

__kernel void integrator_0_ut(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double e0p0 = ghost(x,0,1,e);
    double T000p0 = ghost(x,0,1,T00);
    dst[0+_i] = sqrt((T000p0 + p(e0p0)) / ((e0p0 + p(e0p0))));
    }
}

__kernel void integrator_0_ux(__global double *dst,__global double *eig,__global double *T00,__global double *T01,__global double *e,__global double *ut,__global double *ux,double t,double dt,double cdt,__global double *__err) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint _i = x+x_size*(y+y_size*z);
    if(__err[_i]){
    double ut0p0 = ghost(x,0,1,ut);
    double T010p0 = ghost(x,0,1,T01);
    double e0p0 = ghost(x,0,1,e);
    dst[0+_i] = T010p0 / (ut0p0 * (e0p0 + p(e0p0)));
    }
}

__kernel void kc_sqrmod(__global double2 *src,__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = c_sqrmod(src[x]);
}

__kernel void kc_times(__global double2 *a,__global double2 *b,__global double2 *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = c_times(a[x],b[x]);
}

__kernel void kc_times_conj(__global double2 *a,__global double2 *b,__global double2 *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = c_times_conj(a[x],b[x]);
}

__kernel void moments_to_cumulants(__global double *moments,__global double *cumulants,uint vect_dim,uint num) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);

    uint C[] = {1,1,1,1,2,1,1,3,3,1,1,4,6,4,1,1,5,10,10,5,1,1,6,15,20,15,6,1,1,7,21,35,35,21,7,1,1,8,28,56,70,56,28,8,1,1,9,36,84,126,126,84,36,9,1,1,10,45,120,210,252,210,120,45,10,1,1,11,55,165,330,462,462,330,165,55,11,1,1,12,66,220,495,792,924,792,495,220,66,12,1,1,13,78,286,715,1287,1716,1716,1287,715,286,78,13,1,1,14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,1,1,15,105,455,1365,3003,5005,6435,6435,5005,3003,1365,455,105,15,1,1,16,120,560,1820,4368,8008,11440,12870,11440,8008,4368,1820,560,120,16,1,1,17,136,680,2380,6188,12376,19448,24310,24310,19448,12376,6188,2380,680,136,17,1,1,18,153,816,3060,8568,18564,31824,43758,48620,43758,31824,18564,8568,3060,816,153,18,1,1,19,171,969,3876,11628,27132,50388,75582,92378,92378,75582,50388,27132,11628,3876,969,171,19,1,1,20,190,1140,4845,15504,38760,77520,125970,167960,184756,167960,125970,77520,38760,15504,4845,1140,190,20,1,1,21,210,1330,5985,20349,54264,116280,203490,293930,352716,352716,293930,203490,116280,54264,20349,5985,1330,210,21,1,1,22,231,1540,7315,26334,74613,170544,319770,497420,646646,705432,646646,497420,319770,170544,74613,26334,7315,1540,231,22,1,1,23,253,1771,8855,33649,100947,245157,490314,817190,1144066,1352078,1352078,1144066,817190,490314,245157,100947,33649,8855,1771,253,23,1,1,24,276,2024,10626,42504,134596,346104,735471,1307504,1961256,2496144,2704156,2496144,1961256,1307504,735471,346104,134596,42504,10626,2024,276,24,1};
    uint w = vect_dim;
    uint size = w*num;
    for(uint i = 0; i<vect_dim; i++) {
        for(uint n = 0; n<num; n++) {
            uint nn = n*(n+1)/2;
            double m = 0.0;
            for(uint k = 0; k<n; k++) {
                m += C[nn + k]*cumulants[i+w*k + x*size]*moments[i+w*(n-k-1) + x*size];
            }
            cumulants[i+w*n + x*size] = moments[i+w*n + x*size] - m;
        }
    }

}

__kernel void move(__global double *src,__global double *dst,uint4 size,uint offset,uint vect_dim) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    for(uint _w = 0; _w<vect_dim; _w++) dst[vect_dim*(x+x_size*(y+y_size*z) + offset)+_w] = src[vect_dim*(x+size.x*(y+size.y*z))+_w];
}

__kernel void omove(__global double *src,__global double *dst,uint2 size,uint4 offsets,uint vect_dim) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    for(uint _w = 0; _w<vect_dim; _w++) dst[vect_dim*(x+x_size*(y+y_size*z))+_w] = src[vect_dim*(x+offsets.x)+size.x*((y+offsets.y)+size.y*(z+offsets.z))+_w];
}

__kernel void philox4x32_10(__global uint *src) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint key[2] = {0,x};
    const uint l = 4;
    const uint M = 0xD2511F53;
    const uint M2 = 0xCD9E8D57;
    for(int i = 0;i<10;i++){
        uint hi0 = mul_hi(M,src[x*l+0]);
        uint lo0 = M * src[x*l+0];
        uint hi1 = mul_hi(M2,src[x*l+2]);
        uint lo1 = M2 * src[x*l+2];
        src[x*l+0] = hi1^key[0]^src[x*l+1];
        src[x*l+1] = lo1;
        src[x*l+2] = hi0^key[1]^src[x*l+3];
        src[x*l+3] = lo0;
        key[0] += 0x9E3779B9;
        key[1] += 0xBB67AE85;
    }

}

__kernel void philox4x32_10_normal(__global uint *src,__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint key[2] = {0,x};
    const uint l = 4;
    const uint M = 0xD2511F53;
    const uint M2 = 0xCD9E8D57;
    for(int i = 0;i<10;i++){
        uint hi0 = mul_hi(M,src[x*l+0]);
        uint lo0 = M * src[x*l+0];
        uint hi1 = mul_hi(M2,src[x*l+2]);
        uint lo1 = M2 * src[x*l+2];
        src[x*l+0] = hi1^key[0]^src[x*l+1];
        src[x*l+1] = lo1;
        src[x*l+2] = hi0^key[1]^src[x*l+3];
        src[x*l+3] = lo0;
        key[0] += 0x9E3779B9;
        key[1] += 0xBB67AE85;
    }
    const uint l2 = l/2;
    for(uint i = 0;i<l2;i+=2) {
        double u1 = (double)(((((ulong)src[x*l+i])<<32)+src[x*l+i+1])>>11)/(1l << 53);
        double u2 = (double)(((((ulong)src[x*l+i+2])<<32)+src[x*l+i+3])>>11)/(1l << 53);
        dst[x*l2+i] = sqrt(-2*log(u1))*cos(2*M_PI*u2);
        dst[x*l2+i+1] = sqrt(-2*log(u1))*sin(2*M_PI*u2);
    }
}

__kernel void philox4x32_10_unit(__global uint *src,__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    uint key[2] = {0,x};
    const uint l = 4;
    const uint M = 0xD2511F53;
    const uint M2 = 0xCD9E8D57;
    for(int i = 0;i<10;i++){
        uint hi0 = mul_hi(M,src[x*l+0]);
        uint lo0 = M * src[x*l+0];
        uint hi1 = mul_hi(M2,src[x*l+2]);
        uint lo1 = M2 * src[x*l+2];
        src[x*l+0] = hi1^key[0]^src[x*l+1];
        src[x*l+1] = lo1;
        src[x*l+2] = hi0^key[1]^src[x*l+3];
        src[x*l+3] = lo0;
        key[0] += 0x9E3779B9;
        key[1] += 0xBB67AE85;
    }
    const uint l2 = l/2;
    for(uint i = 0;i<l2;i++)
        dst[x*l2+i] = (double)(((((ulong)src[x*l+i*2])<<32)+src[x*l+i*2+1])>>11)/(1l << 53);
}

__kernel void propagate_error(__global double *dst,__global double *src) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = ghost(x+1,0,1,src) || ghost(x-1,0,1,src) || ghost(x,0,1,src);
}

__kernel void rdmove(__global double *src,__global double *dst,uint4 size,uint4 dst_size,uint vect_dim) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    for(uint _w = 0; _w<vect_dim; _w++) dst[vect_dim*(x+dst_size.y*(y+dst_size.z*(z+dst_size.x*dst_size.w)))+_w] = src[vect_dim*x+size.x*(y+size.y*z)+_w];
}

__kernel void reset_error(__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = true;
}

__kernel void times(__global double *a,__global double *b,__global double *dst) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    dst[x] = a[x]*b[x];
}

__kernel void to_var(__global double *src) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    src[x+x_size] = sqrt(src[x+x_size]-src[x]*src[x]);
}

__kernel void vcminus(__global double *src,__global double *dst,__global double *c,uint4 size,uint vect_dim) {
    int x = get_global_id(0); int x_size = get_global_size(0);
    int y = get_global_id(1); int y_size = get_global_size(1);
    int z = get_global_id(2); int z_size = get_global_size(2);
    for(uint _w = 0; _w<vect_dim; _w++) dst[vect_dim*(x+x_size*(y+y_size*z))+_w] = src[vect_dim*(x+x_size*(y+y_size*z))+_w]-c[_w*size.w/vect_dim + size.w*(x*size.x/x_size+size.x*(y*size.y/y_size+size.y*(z*size.z/z_size)))];
}

